terraform init 
    Command to tell terraform to scan the code and figure out which providers are being 
    used and download the code for them. Need to run this anytime when starting with 
    new terraform code. Command is idempotent so can be run multiple times.

terraform plan
    Lets you see what terraform will do before actually making any changes
    Anything with + will be created
    Anything with - will be deleted
    Anything with ~ will be modified in place
    Note that terraform plan only looks at resources in it's terraform state files
    Plan will not take account of any resources created outside of terraform

terraform apply
    Command used to create our infrastructure!

terraform destroy
    Command used to tear down infrastructure

terraform fmt
    Used to format terraform files

<<-EOF and EOF
    Terraform heredoc syntax that allows writing multiline strings without
    having to use \n characters all over the place

terraform graph
    Used to illustrate the terraform dependency graph in DOT
    can be used to turn into an image using Graphviz

terraform output
    Command to list all outputs without applying any changes
    can be more specific with: terraform output <OUTPUT_NAME>

(Workspaces only really ever used for testing, not suitable for isolating environments)

terraform workspace show
    Command used to identify what workspace you're currently in

terraform workspace new <WORKSPACE_NAME>
    Creates a new workspace

terraform workspace list
    Command used to list workspaces

terraform workspace select <WORKSPACE_NAME>
    Used to move between workspaces

[ for <ITEM> in <LIST> : <OUTPUT> ]
    Used to loop over a list

[ for <KEY>, <VALUE> in <MAP> : <OUTPUT> ]
    Used to loop over a map

{ for <ITEM> in <LIST> : <OUTPUT_KEY> => <OUTPUT_VALUE> }
    Loop over a list and output a map

{ for <KEY>, <VALUE> in <LIST> : <OUTPUT_KEY> => <OUTPUT_VALUE> }
    Loop over a map and output a map

%{ for <ITEM> in <COLLECTION> }<BODY>%{ endfor }
    Use control statements within strings

%{ for <INDEX>, <ITEM> in <COLLECTION> }<BODY>%{ endfor }
    Same thing but using the index

terraform import <PROVIDER>_<TYPE>.<NAME>
    Used to import infrastructure you created before starting to use terraform

terraform state mv <ORIGINAL_REFERENCE> <NEW_REFERENCE>
    Used for manually updating terraform state
    where ORIGINAL_REFERENCE is the reference expression to the resource as it is now
    and NEW_REFERENCE is the new location you want to move it to.
    e.g. renaming: terraform state mv aws_security_group.instance aws_security_group.cluster_instance